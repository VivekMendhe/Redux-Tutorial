import { createAction, createReducer, createSlice } from "@reduxjs/toolkit";

// export const taskAdded = createAction("taskAdded");
// export const taskRemoved = createAction("taskRemoved");

// task slice
const slice = createSlice({
    name: "tasks",
    initialState: [],
    reducers: {
      taskAdded: (state, action) => {
        console.log("taskAdded action called", action);
        state.push({
          id: action.payload.id,
          description: action.payload.description,
          status: action.payload.status,
        });
      },
      taskRemoved: (state, action) => {
        console.log("taskRemoved action called", action);
        return state.filter((item) => item.id !== action.payload);
      },
    },
  });
  
// selector: getting state and return computed state   
export const pendingTaskState = state => {
    return state.task.filter(task=>task.status === 'Pending')
}
export const completedTaskState = state => {
    return state.task.filter(task=>task.status === 'Done')
}


// console.log(action({id:1}));
// action type
// const TASK_ADDED = "taskAdded";
// const TASK_REMOVED = "taskRemoved";

// action creator
// export function taskAdded({ id, description, status }) {
//   return {
//     type: TASK_ADDED,
//     payload: {
//       id,
//       description,
//       status,
//     },
//   };
// }

// export function taskRemoved(id) {
//   return {
//     type: TASK_REMOVED,
//     payload: {
//       id,
//     },
//   };
// }

// reducer
// export default function reducer(state = [], action) {
//   if (action.type === TASK_ADDED) {
//     return [
//       ...state,
//       {
//         id: action.payload.id,
//         description: action.payload.description,
//         status: action.payload.status,
//       },
//     ];
//   } else if (action.type === TASK_REMOVED) {
//     return state.filter((item) => item.id !== action.payload.id);
//   } else {
//     return state;
//   }
// }

/*
export default function reducer(state = [], action) {
  if (action.type === taskAdded.type) {
    return [
      ...state,
      {
        id: action.payload.id,
        description: action.payload.description,
        status: action.payload.status,
      },
    ];
  } else if (action.type === taskRemoved.type) {
    return state.filter((item) => item.id !== action.payload.id);
  } else {
    return state;
  }
}
*/

/*
export default createReducer([], (builder) => {
  builder
    .addCase(taskAdded, (state, action) => {
      state.push({
        id: action.payload.id,
        description: action.payload.description,
        status: action.payload.status,
      });
    })
    .addCase(taskRemoved, (state, action) => {
      return state.filter((item) => item.id !== action.payload);
    });
});
*/




// Export the reducer to be used in the store
export default slice.reducer;

// Export the action creators generated by createSlice
export const { taskAdded, taskRemoved } = slice.actions;

console.log(slice);
